#!/usr/bin/python3

import sys
import math
from math import *

def usage():
    print("USAGE")
    print("    ./105torus opt a0 a1 a2 a3 a4 n\n")
    print("DESCRIPTION")
    print("    opt             method option:")
    print("                        1 for the bisection method")
    print("                        2 for Newton’s method")
    print("                        3 for the secant method")
    print("    a[0-4]    coefficients of the equation")
    print("    n         precision (the application of the polynomial to the solution should")
    print("              be smaller than 10ˆ-n)")

if __name__ == '__main__':
    if (len(sys.argv) == 2 and sys.argv[1] == "-h"):
        usage()
        exit(0)

try:
    z = int(sys.argv[1])
    n0 = int(sys.argv[2])
    n1 = int(sys.argv[3])
    n2 = int(sys.argv[4])
    n3 = int(sys.argv[5])
    n4 = int(sys.argv[6])
    z2 = int(sys.argv[7])
except:
    sys.exit(84)

def derive(a):
    derive = (4 * n4 * pow(a, 3) + 3 * n3 * pow(a, 2) + 2 * n2 * a + n1)
    return (derive)

def fonction(a):
    fonction= (n4 * pow(a, 4) + n3 * pow(a, 3) + n2 * pow(a, 2) + n1 * a + n0)
    return (fonction)

def bisection_method(parametre):
    a = 0
    b = 1
    c = 0
    d = 1
    while abs (c - d) > pow(10, -z2):
        d = c
        c = (a + b) / 2
        if fonction(a) * fonction(c) <= 0:
            b = c
        else:
            a = c
        if pow(10, z2) * c % 1 == 0:
            print("x =", c)
        else:
            print("x = %.*f" % (z2, c))
if z == 1:
    bisection_method(z2)

def secant_method(parametre):
    a = 0
    b = 1
    c = 0
    while abs (a - b) > pow(10, -z2):
        c = b - ((b - a) / (fonction(b) - fonction(a))) * fonction(b)
        a = b
        b = c
        if pow(10, z2) * c % 1 == 0:
            print("x =", c)
        else:
            print("x = %.*f" % (z2, c))
if z == 3:
    secant_method(z2)

def newton_method(parametre):
    a = 0
    a = a + 0.5
    print ("x =", a)
    while (abs(fonction(a)/derive(a)) > pow(10, -z2)):
        a = a - (fonction(a)/derive(a))
        if pow(10, z2) * fonction(a) % 1 == 0:
            print("x =", a)
        else:
            print("x = %.*f" % (z2, a))
if z == 2:
    newton_method(z2)
