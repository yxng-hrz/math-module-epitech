#!/usr/bin/python3

import sys
import numpy as np

def create_grid(a, b):
    x, y = np.meshgrid(range(10, 60, 10), range(10, 60, 10))
    numerator = (a - x) * (b - y)
    denominator = (5 * a - 150) * (5 * b - 150)
    return numerator / denominator

def marginal_sums(grid):
    return np.sum(grid, axis=0), np.sum(grid, axis=1)

def z_probabilities(grid):
    z_values = np.array([np.sum(np.fromiter((grid[x // 10 - 1, y // 10 - 1] for x in range(10, 60, 10) for y in range(10, 60, 10) if x + y == z), dtype=float)) for z in range(20, 110, 10)])
    return z_values

def calc_expectation_variance(values, weights):
    expectation = np.sum(values * weights)
    variance = np.sum(values * np.square(weights - expectation))
    return expectation, variance

def display_output(grid, x_marginal, y_marginal, z_prob, x_stats, y_stats, z_stats):
    print("---------------------------------------------------------------------------------------------------------")
    print("          X=10      X=20      X=30      X=40      X=50      Y law")
    for i, row in enumerate(grid):
        print(f"Y={10*(i+1)}", end="  ")
        for val in row:
            print(f"    {val:.3f}", end=" ")
        print(f"    {y_marginal[i]:.3f}")
    print("X law", end=" ")
    for val in x_marginal:
        print(f"    {val:.3f}", end=" ")
    print("    1.000")
    print("---------------------------------------------------------------------------------------------------------")
    print("z", end="         ")
    for i in range(9):
        print(f"{20+10*i}", end="        ")
    print("\np(Z=z)", end="    ")
    for val in z_prob:
        print(f"{val:.3f}", end="     ")
    print("\n---------------------------------------------------------------------------------------------------------")
    print(f"expected value of X:          {x_stats[0]:.1f}")
    print(f"variance of X:                {x_stats[1]:.1f}")
    print(f"expected value of Y:          {y_stats[0]:.1f}")
    print(f"variance of Y:                {y_stats[1]:.1f}")
    print(f"expected value of Z:          {z_stats[0]:.1f}")
    print(f"variance of Z:                {z_stats[1]:.1f}")
    print("---------------------------------------------------------------------------------------------------------")

def main():
    if len(sys.argv) != 3:
        print("Usage: script.py <a> <b>")
        sys.exit(84)

    try:
        a, b = map(int, sys.argv[1:])
        assert a > 50 and b > 50
    except (ValueError, AssertionError):
        print("Arguments must be integers greater than 50.")
        sys.exit(84)

    grid = create_grid(a, b)
    x_marginal, y_marginal = marginal_sums(grid)
    z_prob = z_probabilities(grid)
    x_stats = calc_expectation_variance(x_marginal, np.arange(10, 60, 10))
    y_stats = calc_expectation_variance(y_marginal, np.arange(10, 60, 10))
    z_stats = calc_expectation_variance(z_prob, np.arange(20, 110, 10))

    display_output(grid, x_marginal, y_marginal, z_prob, x_stats, y_stats, z_stats)

if __name__ == "__main__":
    main()
